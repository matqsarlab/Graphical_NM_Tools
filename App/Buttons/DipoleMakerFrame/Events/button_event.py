import os
import re

import customtkinter
import numpy as np
from customtkinter import filedialog

from Static._dft_read import dipole_info
from Static.Align_two_3D_object import (Structure1_translate,
                                        Structure2_add_rotate)


def openSfiles(self):
    self._name = filedialog.askopenfilenames()
    self.__InitPath__ = os.path.dirname(self._name[0])
    self.s1.configure(fg_color="green")
    if self._name != None and self._dipole != None:
        self.save_button.configure(state="normal")


def dipoleFile(self):
    self._dipole = filedialog.askopenfilename()
    if self._dipole:
        self.s2.configure(fg_color="green")
    if self._name != None and self._dipole != None:
        self.save_button.configure(state="normal")


def saveSfiles(self):
    def save(xyz, name, path):
        with open(os.path.join(dir, sub_dir1, path), "w") as f:
            f.write(str(len(xyz)) + "\n")
            f.write("XYZ file generated by Script\n")
            for coor, n in zip(xyz, name):
                f.write("{}{:>20}{:>13}{:>13}\n".format(n, coor[0], coor[1], coor[2]))

    def atom_info(xyz1, xyz2):
        with open(os.path.join(dir, sub_dir1, f"atom_info"), "w") as f:
            f.write(
                """### Informations about range of atoms in *xyz file
### First line  - structer's 1
### Second line - structer's 2\n"""
            )
            f.write(sub_dir1 + f"=1-{len(xyz1)}\n")
            f.write(sub_dir2 + f"={1+len(xyz1)}-{len(xyz2)}\n")
        return 1

    def to_xyz(data):
        data = np.array(["{:.5f}".format(line) for line in data.flatten()]).reshape(
            data.shape
        )
        return data

    darkblue = "#1f538d"

    nproc = str(self.spinbox_1.get())
    ram = str(self.spinbox_2.get())
    charge = str(self.spinbox_3.get())
    multiplicity = str(self.spinbox_4.get())
    basis1 = str(self.spinbox_5.get())

    dir = filedialog.askdirectory(initialdir=self.__InitPath__)
    path = str()
    if dir != "":
        for i in self._name:
            obj1 = Structure1_translate(i)
            xyz_obj1 = obj1.translate_center_to_zero

            obj2 = Structure2_add_rotate(i, self._dipole)
            xyz_obj2 = obj2.rotate_2D_object
            name = np.append(obj1.get_name, obj2.get_name)
            chk_name = path.split(".")[0]  # checkpoint name

            xyz_rotated = np.append(xyz_obj1, xyz_obj2[0], axis=0).round(decimals=4)
            xyz_horizontal = np.append(xyz_obj1, xyz_obj2[1], axis=0).round(decimals=4)
            xyz_vertical = np.append(xyz_obj1, xyz_obj2[2], axis=0).round(decimals=4)
            xyz_horizontal2 = np.append(xyz_obj1, xyz_obj2[3], axis=0).round(decimals=4)

            xyz_rotated = to_xyz(xyz_rotated)
            xyz_horizontal = to_xyz(xyz_horizontal)
            xyz_vertical = to_xyz(xyz_vertical)
            xyz_horizontal2 = to_xyz(xyz_horizontal2)

            sub_dir1 = i.split("/")[-1].replace(".xyz", "")
            if not os.path.isdir(os.path.join(dir, sub_dir1)):
                os.mkdir(os.path.join(dir, sub_dir1))
            sub_dir2 = self._dipole.split("/")[-1].replace(".xyz", "")

            if "/" in i or self._dipole:
                path = (
                    i.split("/")[-1].replace(".xyz", "")
                    + "_"
                    + self._dipole.split("/")[-1]
                )

            path_rotated = path.replace(".xyz", "_vertical.xyz")
            path_horizontal = path.replace(".xyz", "_horizontal.xyz")
            path_vertcial = path.replace(".xyz", "_vertical2.xyz")
            path_horizontal2 = path.replace(".xyz", "_horizontal2.xyz")

            save(xyz_rotated, name, path_rotated)
            save(xyz_horizontal, name, path_horizontal)
            save(xyz_vertical, name, path_vertcial)
            save(xyz_horizontal2, name, path_horizontal2)

            atom_info(xyz_obj1, xyz_rotated)
            txt = dipole_info(
                nproc,
                ram,
                chk_name,
                charge,
                multiplicity,
                basis1,
                self._default_method_dipole,
                pseudo=self._choose_pseudo_potential.get(),
            )
            with open(os.path.join(dir, sub_dir1, "dft_info"), "w") as f:
                f.write(txt)

        self._name = {}
        self.save_button.configure(state="disabled")
        self.s1.configure(fg_color=darkblue)
        self.s2.configure(fg_color=darkblue)


def optionmenu_callback(self):
    self.select_frame_by_name("dipolemaker")


def viewButtonFunc2(self):
    nproc = str(self.spinbox_1.get())
    ram = str(self.spinbox_2.get())
    charge = str(self.spinbox_3.get())
    multiplicity = str(self.spinbox_4.get())
    basis1 = str(self.spinbox_5.get())
    pseudo = str(self.spinbox_6.get())
    txt = dipole_info(
        nproc,
        ram,
        "<name>",
        charge,
        multiplicity,
        basis1,
        method=self._default_method_dipole,
        pseudo=pseudo,
    )
    self.consoletextbox.configure(state="normal")
    self.consoletextbox.delete("0.0", "end")
    self.consoletextbox.insert("0.0", txt)
    self.consoletextbox.configure(state="disabled")
    self._consoleText = txt


def openToGaussianDir(self):
    self.open_button.configure(fg_color="green")
    path = filedialog.askdirectory(initialdir=self.__InitPath__)
    self.list_of_files_agree = {}
    atom_info = {}
    dft_info = {}
    list_of_files_noxyz = []
    errors = set()

    for (dirpath, dirnames, filenames) in os.walk(path):
        for filename in filenames:
            if filename.endswith(".xyz"):
                relpath = os.path.relpath(dirpath, path)
                self.list_of_files_agree[dirpath] = relpath
                ati = any(
                    [True if i == "atom_info" else False for i in os.listdir(dirpath)]
                )
                dfti = any(
                    [True if i == "dft_info" else False for i in os.listdir(dirpath)]
                )
                if ati == True:
                    atom_info[dirpath] = ("atom_info OK", "agree")
                else:
                    atom_info[dirpath] = ("atom_info ERROR", "error")
                    errors.add(dirpath)

                if dfti == True:
                    dft_info[dirpath] = ("dft_info OK", "agree")
                else:
                    dft_info[dirpath] = ("dft_info ERROR", "error")
                    errors.add(dirpath)
                self.save_button.configure(state="normal")

        for dirname in dirnames:  # There no xyz file check
            absPath = os.sep.join([dirpath, dirname])  # abs dir path
            ld = os.listdir(absPath)
            ans = any([True if i.endswith(".xyz") else False for i in ld])
            if ans == False:
                list_of_files_noxyz.append(os.path.relpath(absPath, path))

    customtkinter.CTkTextbox.tag_config(
        self.consoletextbox, "agree", foreground="green"
    )
    customtkinter.CTkTextbox.tag_config(
        self.consoletextbox, "warning", foreground="#e6ac00"
    )
    customtkinter.CTkTextbox.tag_config(self.consoletextbox, "error", foreground="red")
    self.consoletextbox.configure(state="normal")
    self.consoletextbox.delete("0.0", "end")
    self.consoletextbox.insert("0.0", self._consoleText)
    self.consoletextbox.insert("end", "\n\n")
    for a, d, direc in zip(
        atom_info.values(),
        dft_info.values(),
        self.list_of_files_agree.values(),
    ):
        self.consoletextbox.insert("end", f"{direc}\t\t\t\t xyz files: OK\n", "agree")
        self.consoletextbox.insert("end", f"\t\t\t\t {a[0]}\n", a[1])
        self.consoletextbox.insert("end", f"\t\t\t\t {d[0]}\n", d[1])
        self.consoletextbox.insert("end", "\n\n", d[1])
    self.consoletextbox.insert("end", "\n")
    for n in list_of_files_noxyz:
        self.consoletextbox.insert("end", f"{n}\t\t\t ALERT: no xyz files\n", "warning")
    self.consoletextbox.configure(state="disabled")

    for key in errors:  # remove from dict directory without atom_info/dft_info
        del self.list_of_files_agree[key]


def gaussianInputCreator(self):
    def block(xyz_coor, atom):
        Q = []
        to_block = xyz_coor[: int(atom.split("-")[1])]
        unlock = xyz_coor[int(atom.split("-")[1]) :]
        for line in to_block:
            spl = line.split()
            Q.append(
                "{}{:>8}{:>12}{:>13}{:>13}\n".format(
                    spl[0], "-1", spl[1], spl[2], spl[3]
                )
            )

        return Q + unlock

    # only directories

    def change_line(list, num, charge):
        line = list[num].split()
        line.insert(len(line), str(charge))
        line.pop(0)
        return "\t\t".join(line) + "\n"

    for path in self.list_of_files_agree:
        f_xyz_list = [f for f in os.listdir(path) if f.endswith("xyz")]

        for f_xyz in f_xyz_list:

            with open(path + "/dft_info") as dft, open(
                path + "/atom_info"
            ) as atom, open(os.path.join(path, f_xyz)) as xyz:
                dft_info = dft.readlines()
                atom_info = atom.readlines()
                atom_1 = atom_info[3][1 + atom_info[3].index("=") :].replace("\n", "")
                xyz_coor = xyz.readlines()[2:]
                atoms = xyz_coor[:-2]
                charges = xyz_coor[-2:]

                plus = change_line(charges, 0, 1.0)
                minus = change_line(charges, 1, -1.0)
                charges = [plus, minus]

                if self._froze.get() == "on":
                    atoms = block(atoms, atom_1)

                idx = [i for i, item in enumerate(dft_info) if re.search("--", item)][0]
                up = dft_info[:idx]

                down = dft_info[1 + idx :]
                if "pseudo=" in down[-1]:
                    down[-1] = down[-1].replace("pseudo=", f"{atom_1} 0\n")

                idx_chk = [i for i, item in enumerate(up) if "%chk" in item][0]
                up[idx_chk] = up[idx_chk].replace("\n", f"{f_xyz.split('.')[0]}\n")

            with open(os.path.join(path, f_xyz.replace("xyz", "com")), "w") as com:
                com.write("".join(up))
                com.write("".join(atoms))
                com.write("\n")
                com.write("".join(charges))
                com.write("\n")
                com.write(atom_1 + " " + "0" + "\n")
                com.write("".join(down))
                com.write("\n\n")

    self.consoletextbox.configure(state="normal")
    self.consoletextbox.delete("0.0", "end")
    self.consoletextbox.configure(state="disabled")


def froze_button(self):
    return self._froze.get()
