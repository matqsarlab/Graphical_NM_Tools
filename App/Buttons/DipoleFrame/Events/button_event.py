import os

import numpy as np
from customtkinter import filedialog

from Static._dft_read import dft_info
from Static.Align_two_3D_object import (Structure1_translate,
                                        Structure2_add_rotate)


def openSfiles(self, name):
    self._name[name] = filedialog.askopenfilenames()
    self.__InitPath__ = os.path.dirname(self._name[name][0])
    if len(self._name.keys()) > 1:
        self.save_button.configure(state="normal")
    if name == "s1":
        self.s1.configure(fg_color="green")
    if name == "s2":
        self.s2.configure(fg_color="green")


def saveSfiles(self):
    def save(xyz, name, path):
        with open(os.path.join(dir, sub_dir1, sub_dir2, path), "w") as f:
            f.write(str(len(xyz)) + "\n")
            f.write("XYZ file generated by Script\n")
            for coor, n in zip(xyz, name):
                f.write("{}{:>20}{:>13}{:>13}\n".format(n, coor[0], coor[1], coor[2]))

    def atom_info(xyz1, xyz2):
        with open(os.path.join(dir, sub_dir1, sub_dir2, f"atom_info"), "w") as f:
            f.write(
                """### Informations about range of atoms in *xyz file
    ### First line  - structer's 1
    ### Second line - structer's 2\n"""
            )
            f.write(sub_dir1 + f"=1-{len(xyz1)}\n")
            f.write(sub_dir2 + f"={1+len(xyz1)}-{len(xyz2)}\n")
        return 1

    darkblue = "#1f538d"
    self.s1.configure(fg_color=darkblue)
    self.s2.configure(fg_color=darkblue)
    self.save_button.configure(state="disabled")

    nproc = str(self.spinbox_1.get())
    ram = str(self.spinbox_2.get())
    charge = str(self.spinbox_3.get())
    multiplicity = str(self.spinbox_4.get())
    basis1 = str(self.spinbox_5.get())
    basis2 = str(self.spinbox_6.get())

    dir = filedialog.askdirectory(initialdir=self.__InitPath__)
    path = str()
    for i in self._name["s1"]:
        for j in self._name["s2"]:
            obj1 = Structure1_translate(i)
            xyz_obj1 = obj1.translate_center_to_zero

            obj2 = Structure2_add_rotate(i, j)
            xyz_obj2 = obj2.rotate_object

            name = np.append(obj1.get_name, obj2.get_name)
            chk_name = path.split(".")[0]  # checkpoint name

            xyz_str = np.append(xyz_obj1, xyz_obj2, axis=0).round(decimals=4)

            xyz_str = np.array(
                ["{:.5f}".format(line) for line in xyz_str.flatten()]
            ).reshape(xyz_str.shape)

            sub_dir1 = i.split("/")[-1].replace(".xyz", "")
            if not os.path.isdir(os.path.join(dir, sub_dir1)):
                os.mkdir(os.path.join(dir, sub_dir1))
            sub_dir2 = j.split("/")[-1].replace(".xyz", "")
            if not os.path.isdir(os.path.join(dir, sub_dir1, sub_dir2)):
                os.mkdir(os.path.join(dir, sub_dir1, sub_dir2))

            if "/" in i or j:
                path = j.split("/")[-1].replace(".xyz", "") + "_" + i.split("/")[-1]

            save(xyz_str, name, path)
            atom_info(xyz_obj1, xyz_obj2)
            txt = dft_info(nproc, ram, chk_name, charge, multiplicity, basis1, basis2)
            with open(os.path.join(dir, sub_dir1, sub_dir2, "dft_info"), "w") as f:
                f.write(txt)

    self._name = {}


def optionmenu_callback(self):
    self.select_frame_by_name("DxyzS")


def viewButtonFunc2(self):
    nproc = str(self.spinbox_1.get())
    ram = str(self.spinbox_2.get())
    charge = str(self.spinbox_3.get())
    multiplicity = str(self.spinbox_4.get())
    basis1 = str(self.spinbox_5.get())
    basis2 = str(self.spinbox_6.get())
    txt = dft_info(nproc, ram, "<name>", charge, multiplicity, basis1, basis2)
    self.consoletextbox.configure(state="normal")
    self.consoletextbox.delete("0.0", "end")
    self.consoletextbox.insert("0.0", txt)
    self.consoletextbox.configure(state="disabled")
    self._consoleText = txt


def openToGaussianDir(self):
    path = filedialog.askdirectory(initialdir=self.__InitPath__)
    list_dir = [
        i for i in os.listdir(path) if not os.path.isfile(os.path.join(path, i))
    ]
    self.consoletextbox.configure(state="normal")
    self.consoletextbox.insert("end", "\n\nSelected Directories:\n" + "_" * 20)
    self.consoletextbox.insert("end", "\n")
    for n in list_dir:
        self.consoletextbox.insert("end", f"{n}\n")
    self.consoletextbox.insert("end", "_" * 20)

    # # Logic
    # for ll in list_dir:
    #     # n1 = path.split("/")[-1]
    #     # n2 = path.split("/")[-2]
    #     # f_xyz = [f for f in os.listdir(path) if f.endswith("xyz")][0]
    #     print(ll)
    list_of_files = {}
    for (dirpath, _, filenames) in os.walk(path):
        for filename in filenames:
            if filename.endswith(".xyz"):
                list_of_files[filename] = os.sep.join([dirpath, filename])
    print(list_of_files)
    pass


def gaussianInputCreator(self):
    dir = filedialog.askdirectory(initialdir=self.__InitPath__)
    pass
